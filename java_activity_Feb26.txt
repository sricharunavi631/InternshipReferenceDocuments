class Super {
  public int index = 1;
}

class App extends Super {

  public App(int index) {
    index = index;
  }

  public static void main(String args[]) {
    App myApp = new App(10);
    System.out.println(myApp.index);
  }
}

A. 0
B. 10
C. 1
D. Compile time error

Ans : C

The reason for this unexpected output is because in the constructor of the App class, index = index; is assigning the parameter index to itself, not to the instance variable index of the class. 

---------------------------------------------

class TestApp {
  protected int x, y;
}

class Main {
  public static void main(String args[]) {
    TestApp app = new TestApp();
    System.out.println(app.x + " " + app.y);
  }
}

A. 0 1
B. 1 0
C. 0 0
D. null null

Ans : C

--------------------------------------------

class TestApp {
  public static void main(String[] args) {
    for (int index = 0; 1; index++) {
      System.out.println("Welcome");
      break;
    }
  }
}

A. Welcome
B. Welcome Welcome
C. Type mismatch error
D. Run infinite-times


Ans : C

-----------------------------------------------

class TestApp {
  public static void main(String[] args) {
    for (int index = 0; true; index++) {
      System.out.println("Welcome");
      break;
    }
  }
}
A. Welcome
B. None
C. Type mismatch error
D. Run infinite times

Ans : A


---------------------------------------------


class TestApp {
  public static void main(String args[]) {
    int i[] = {1};
    alter(i);
    System.out.println(i[0]);
  }

  public static void alter(int i[]) {
    int j[] = {2};
    i = j;
  }
}


A. 0
B. 1
C. 2
D. Compilation error

Ans : B

--------------------------------------------------------

class TestApp {

  String args[] = {
    "1",
    "2"
  };

  public static void main(String args[]) {
    if (args.length > 0)
      System.out.println(args.length);
  }
}
A. The program compiles but prints nothing.
B. The program fails to compile.
C. The program compiles and prints 2.
D. The program compiles and prints 0.

Ans : A
-------------------------------------------------------


class TestApp {

  public static void main() {
    int odd = 1;
    if (odd) {
      System.out.println("odd");
    } else {
      System.out.println("even");
    }
  }
}
A. odd
B. even
C. Run-time exception
D. Type mismatch error

Ans : D


-------------------------------------------

public void test(boolean a, boolean b) {
  if (a) {
    System.out.println("A");
  } else if (a && b) {
    System.out.println("A && B");
  } else {
    if (!b) {
      System.out.println("!B");
    } else {
      System.out.println("None");
    }
  }
}

A. If a and b both are true, then the output is “A && B”.
B. If a is true and b is false, then the output is “!B”.
C. If a is false and b is true, then the output is “None”.
D. If a and b both are false, then the output is “None”.

Ans C


---------------------------------------------------------

class TestApp {

  public static void main(String[] args) {
    class Tutorial {
      public String name;

      public Tutorial(String tutorial) {
        name = tutorial;
      }
    }

    Object obj = new Tutorial("Java Quiz");
    Tutorial tutorial = (Tutorial) obj;
    System.out.println(tutorial.name);
  }
}
: 

A. An exception occurs while instantiating the Tutorial class.
B. It’ll print “Java Quiz”.
C. The program will print null.
D. Compilation error at line number 13.


Ans : B


This is because the name field of the Tutorial object created is set to "Java Quiz", and the code correctly casts obj to type Tutorial, allowing access to the name field through the tutorial reference.


-------------------------------------------------------------------

class TestApp {

  public static void main(String args[]) {
    System.out.println(test());
  }

  static float test() {
    static float x = 0.0;
    return ++x;
  }
}


A. 0.0
B. 1
C. 1.0
D. Compile time error

Ans D

You cannot use the static keyword to declare local variables within methods in Java. The static keyword is used for class-level variables and methods, not for local variables.


-----------------------------------------------------------------------------
